# Cloud Build YAML for a master builds => application releases.
# The idea here is to run bundled unit and application tests, then produce a tag-docker image, install
# it in a tset environment, run some tests and then release to prod.
# A TODO step for a Sonar build or some nice code-analysis tool is also provided (could of course be
# part of the simple build step).
steps:

#Access the Maven settings-xml secret
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'MavenSettings'
  entrypoint: bash
  args:
  - '-c'
  - |
    gcloud secrets versions access 1 --secret=cloudbuild-maven-settings-secret > settings.xml

# Access the Github id RSA secret
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'GithubIdRsa'
  waitFor: [ '-' ]
  entrypoint: 'bash'
  args: [ '-c', 'gcloud secrets versions access latest --secret=id-rsa-github-secret > /root/.ssh/id_github' ]
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Set up git with key and domain
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'GithubSshConfig'
  waitFor: [ 'GithubIdRsa' ]
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    chmod 600 /root/.ssh/id_github
    cat <<EOF >/root/.ssh/config
    Hostname github.com
    IdentityFile /root/.ssh/id_github
    EOF
    ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Perform Maven build including JUnit and functional tests
- name: 'maven:3.6.3-jdk-11'
  id: 'MavenBuild'
  waitFor: ['MavenSettings']
  entrypoint: 'mvn'
  args: ['--settings', 'settings.xml', '-B', '-q', 'clean', 'install']
  
# Produce a docker image release version.
# Established by stripping -SNAPSHOT from current maven version and storing the value in a file
# Use $(cat _RELEASE_VERSION) to make use of the release version.
- name: 'maven:3.6.3-jdk-11'
  id: 'ReleaseVersion'
  entrypoint: 'bash'
  args:
  - '-c'
  - |-
    echo "$(mvn --settings settings.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" | sed "s/-SNAPSHOT//" > _RELEASE_VERSION
    cat _RELEASE_VERSION
  
# Produce a docker image from the build result using release version.
- name: 'gcr.io/cloud-builders/docker'
  id: 'GcrRelease'
  entrypoint: 'bash'
  args:
  - '-c'
  - |-
    docker build -t gcr.io/$PROJECT_ID/$REPO_NAME:$(cat _RELEASE_VERSION) .
    docker push gcr.io/$PROJECT_ID/$REPO_NAME:$(cat _RELEASE_VERSION)

# Release the version to Github (No test, no artifact deploy for a service)
- name: 'maven:3.6.3-jdk-11'
  id: 'GithubRelease'
  entrypoint: 'bash'
  args:
  - '-c'
  - |-
    git config --global user.email "cloudbuild@grzzboot.com"
    git config --global user.name "Cloud Build"
    mvn --settings settings.xml -B -q release:prepare release:perform -Darguments="-Dmaven.test.skip=true -Dmaven.deploy.skip=true"
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Run kustomize to produce test environment deploy-test.yaml
- name: 'gcr.io/pingpong-site1-gcp-demo/kustomize'
  id: 'DeployTestYaml'
  entrypoint: bash
  args:
  - '-c'
  - |
    kustomize edit set image gcr.io/$PROJECT_ID/$REPO_NAME:$(cat /workspace/_RELEASE_VERSION)
    kustomize build . > deploy-test.yaml
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=$_COMPUTE_ZONE'
    - 'CLOUDSDK_CONTAINER_CLUSTER=$_CONTAINER_CLUSTER'
  dir: '$_K8S_TEST_ENV_FOLDER'
 
# Deploy service to test environment
- name: "gcr.io/cloud-builders/gke-deploy"
  id: 'DeployTest'
  args:
  - run
  - --filename=deploy-test.yaml
  - --location=$_COMPUTE_ZONE
  - --cluster=pingpong-site1-cluster
  dir: '$_K8S_TEST_ENV_FOLDER'
  
# TODO: Potentially run an intergation and acceptance tests to verify all is well

# Run kustomize to produce prod environment deploy-prod.yaml
- name: 'gcr.io/pingpong-site1-gcp-demo/kustomize'
  id: 'DeployProdYaml'
  entrypoint: bash
  args:
  - '-c'
  - |
    kustomize edit set image gcr.io/$PROJECT_ID/$REPO_NAME:$(cat /workspace/_RELEASE_VERSION)
    kustomize build > deploy-prod.yaml
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=$_COMPUTE_ZONE'
    - 'CLOUDSDK_CONTAINER_CLUSTER=$_CONTAINER_CLUSTER'
  dir: '$_K8S_PROD_ENV_FOLDER'
 
# Deploy service to prod environment
- name: "gcr.io/cloud-builders/gke-deploy"
  id: 'DeployProd'
  args:
  - run
  - --filename=deploy-prod.yaml
  - --location=europe-west3-a
  - --cluster=pingpong-site1-cluster
  dir: '$_K8S_PROD_ENV_FOLDER'

substitutions:
  _COMPUTE_ZONE: europe-west3-a
  _CONTAINER_CLUSTER: pingpong-site1-cluster
  _K8S_TEST_ENV_FOLDER: src/k8s/test
  _K8S_PROD_ENV_FOLDER: src/k8s/prod