steps:
- id: 'Access the Maven settings-xml secret'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: bash
  args:
  - '-c'
  - |
    gcloud secrets versions access 1 --secret=cloudbuild-maven-settings-secret > settings.xml

- id: 'Access the Github id RSA secret'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args: [ '-c', 'gcloud secrets versions access latest --secret=id-rsa-github-secret > /root/.ssh/id_github' ]
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Set up git with key and domain
- id: 'Set up git with key and domain'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    chmod 600 /root/.ssh/id_github
    cat <<EOF >/root/.ssh/config
    Hostname github.com
    IdentityFile /root/.ssh/id_github
    EOF
    ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Perform source code build
- id: 'Perform Maven build including JUnit and functional tests'
  name: 'maven:3.6.3-jdk-11'
  entrypoint: 'mvn'
  args: ['--settings', 'settings.xml', '-B', '-q', 'clean', 'install']
  
# Produce a docker image release version.
# Established by stripping -SNAPSHOT from current maven version and storing the value in a file
# Use $(cat _RELEASE_VERSION) to make use of the release version.
- id: 'Extract release version'
  name: 'maven:3.6.3-jdk-11'
  entrypoint: 'bash'
  args:
  - '-c'
  - |-
    echo "$(mvn --settings settings.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" | sed "s/-SNAPSHOT//" > _RELEASE_VERSION
    cat _RELEASE_VERSION
  
# Produce a docker image from the build result using release version.
- id: 'Build and push docker image to GCR'
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - |-
    docker build -t gcr.io/$PROJECT_ID/$_IMAGE_NAME:$(cat _RELEASE_VERSION) .
    docker push gcr.io/$PROJECT_ID/$_IMAGE_NAME:$(cat _RELEASE_VERSION)

# Release the version to Github (No test, no artifact deploy for a service)
- id: 'Release the version to Github'
  name: 'maven:3.6.3-jdk-11'
  entrypoint: 'bash'
  args:
  - '-c'
  - |-
    git config --global user.email "cloudbuild@grzzboot.com"
    git config --global user.name "Cloud Build"
    mvn --settings settings.xml -B -q release:prepare release:perform -Darguments="-Dmaven.test.skip=true -Dmaven.deploy.skip=true"
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Run kustomize to produce test environment deploy-test.yaml
- id: 'Produce YAML for test deploy'
  name: 'gcr.io/pingpong-site1-gcp-demo/kustomize'
  entrypoint: bash
  args:
  - '-c'
  - |
    kubectl edit set image gcr.io/$PROJECT_ID/$_IMAGE_NAME:$(cat /workspace/_RELEASE_VERSION)
    kustomize build . > /deploy-test.yaml
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=europe-west3-a'
    - 'CLOUDSDK_CONTAINER_CLUSTER=pingpong-site1-cluster'
  dir: 'src/k8s/single-deployment/test'
 
# Deploy service to test environment
- id: 'Perform deploy to test environment'
  name: "gcr.io/cloud-builders/gke-deploy"
  args:
  - run
  - --filename=deploy-test.yaml
  - --location=europe-west3-a
  - --cluster=pingpong-site1-cluster
  dir: 'src/k8s/single-deployment/test'
  
# TODO: Potentially run an intergation and acceptance tests to verify all is well

# Run kustomize to produce prod environment deploy-prod.yaml
- id: 'Produce YAML for prod deploy'
  name: 'gcr.io/pingpong-site1-gcp-demo/kustomize'
  entrypoint: bash
  args:
  - '-c'
  - |
    kubectl edit set image gcr.io/$PROJECT_ID/$_IMAGE_NAME:$(cat /workspace/_RELEASE_VERSION)
    kustomize build > deploy-prod.yaml
  env:
    - 'CLOUDSDK_COMPUTE_ZONE=europe-west3-a'
    - 'CLOUDSDK_CONTAINER_CLUSTER=pingpong-site1-cluster'
  dir: 'src/k8s/single-deployment/prod'
 
# Deploy service to prod environment
- id: 'Perform deploy to prod environment'
  name: "gcr.io/cloud-builders/gke-deploy"
  args:
  - run
  - --filename=deploy-prod.yaml
  - --location=europe-west3-a
  - --cluster=pingpong-site1-cluster
  dir: 'src/k8s/single-deployment/prod'

substitutions:
  _IMAGE_NAME: pingpong-cloud-build